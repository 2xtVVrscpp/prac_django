# 変数とその宣言

## 変数の型
一部のプログラム言語を除き、変数(=値を格納する箱)を
使う時には変数の容量や何を入れるのか(型)を定義する必要があります。
そのため、変数の型を知りましょう。

``` eval_rst
.. csv-table:: 変数の型
    :header: "型名", "役割"
    :widths: 15, 15

    "int", "整数型"
    "long int", "大きな整数"
    "float", "浮動小数点付き"
    "double", "実数"
    "boolean", "真偽値 (0/1)"
    "char", "1文字"
    "String", "文字列"
```

## 変数を使う上で
宣言した型の領域を超えるとオーバーフローするので気を付けてください。
以下に例を示しているので実行してみてください。
0/1の関係で  ``01111111(127) → 10000000(-128)`` となります。

```
(例)実行してみて
public class test{
  public static void main(String[] args){
    byte num=127;
    num++;
    System.out.println(num);
  }
}
```

それ以外にも小数点以下の計算を行う時には誤差が生じます。パソコンは2進数で動いているので
``` math
  2^{-1}, 2^{-2}, 2^{-3}...
``` 
で表される数値以外仕方がない。
しかし、誤差が小さくなるようなAPIはありますので
それをご利用ください。

```
(例)実行してみて
public class test{
  public static void main(String[] args){
    double num = 0;
    
    for(int i=0;i<10;i++){
      num += 0.1
    }
    System.out.println(num);
  }
}
```

## 変数の宣言
変数の宣言は ``型 変数名`` という命令文で行われます。
変数名は **Javaプログラムの基本構造**で 記載したように分かりやすい名前を付けてください。
決して ``int a`` などとしないように。
また、初期値を設定することもできます。

(円周率など値を変更したくない変数は ``final`` をつけ、
変更できないようにします。)

```
(例)
int num1;
string paragraph = "Hello World!";
double num2 = 2.3;
```

## 演算子
演算子も設定されているので覚えましょう。
(文字列型の結合は文字列+文字列でできるよ)

``` eval_rst
.. csv-table:: 演算子
    :header: "演算子", "役割"
    :widths: 20, 20
    
    "=", "代入"
    "+, -, *, /", "四則演算"
    "==", "イコール"
    "!=", "ノットイコール"
    "A>B", "AはBより大きい"
    "A<B", "AはBより小さい"
    "var++", "var=var+1"
    "var+=num", "var=var+num"
    "!num", "否定(numではない)"
```

## オペランド
### リテラル
リテラルとは、数字や文字列の形のこと

``` eval_rst
.. csv-table:: リテラル
    :header: "リテラルの種類", "表記例", "型"
    :widths: 20, 20, 15
    
    "小数点がない数字", "3000L", "long"
    "小数点付き数字", "30.5", "double"
    "小数点付き数字で末尾がF/f", "30.5F", "float"
    "真偽値", "true", "boolean"
    "引用符で囲まれた文字", "K", "char"
    "二重引用符で囲まれた文字列", "Java", "String"
```

## 型の変換(キャスト)
int：整数、double：実数、String：文字列とあったが、
doubleの箱にはintの箱が入るのでJavaが自動で変換してくれる。
メモリ領域が小さい変数を大きい変数に代入するときはいい。

![キャストイメージ](pic/cast.png)

メモリ領域が大きい変数を小さい変数に代入することもできるけど...
できるからといってなるべくしないように。無理やり押し込んでいるようなものです。

## 細かい話
変数の宣言というのはコンピュータ(メモリ)上に
領域を確保する手順です。
この時に、領域量を設定しないと
- どれだけ確保すればよいか分からない
- 領域の名前を設定しないと参照できずに使えない

