# オブジェクト指向

## オブジェクト指向を使う
複数人でシステム開発を行う場合，ある一定のルールに従って開発を行うことで効率よく障害も軽減できます．
例えば，
- ソースコードは1つのファイルに1つのmain文で書く．
- ソースコードは複数のメソッドに分け，1つのファイルに書く
- ソースコードは複数のクラス，メソッドに分けて複数のファイルに書く

という状況下において開発を行うとそれぞれが開発したメソッドを相互に使う場合に
参照エラーが出たり，参照するためのパスを通すのが各々で異なり面倒になります．

- 参照エラー：メソッドがどこにあるかわからん
- パスを通す：クラス，メソッドがどこにあるか教える

## オブジェクト指向とは
オブジェクト指向にはさまざまなメリットがありますが，
1つ目にシステムを部品に切る分けることで人間が理解しやすくなります．

例：車

- 窓
	- フロントガラス
	- 後ろの窓
	- 横の窓
- フレーム
	- ドアフレーム
- エンジン
- など

という風に何もない状態から車を作るよりは部品に分けたほうが
**協力して作成でき，具体的に何を作れば良いのかも明確**になります．

システムを部品に分けることで人間は**どうやって各部品を作るか，どのように連携すれば良いのか**を
考えればよくなります．
ベタガキして頭がパンクすることを防ぐ．

今までなんとなくみていた仕事も1つ1つの処理に切り分けたら
実は単純な作業であることに気づきます．
そのため，**難しい仕事も単純な作業を組み合わせるだけ**になるのです．

作業間の関連性もプログラムで定義できるため，
人間のように忘れずに確実に仕事をしてくれます．


## 専門的にいうと
ある入力を受けたらこれを実行する．という**行動責任**
また，オブジェクトは預金残高やゲームのHPなど情報をしっかり覚えておく．という
**情報保持責任**があります．
それぞれJavaで**メソッド**，**フィールド**に当たります．

この段階でJavaプログラミングによって，
現実世界を模倣することができます．


## 更なる機能
オブジェクト指向では以下のような便利機能があります．

- 継承
- 多態性
- カプセル化

それぞれの機能は別のページで紹介します．
オブジェクト指向により，プログラムを使った自動化を行う上で，
現実に忠実にコーディングができるようになった．