# Javaプログラムの基本構造

## 基本的な形
基本的に形としては、クラスブロック、メソッドブロックというまとまりで記述していきます。コードはメソッドブロックの中に書いていきます。ブロックは``{ }``によって囲われる部分になります。

- クラス？メソッド？
⇒「クラス：ボールペン、メソッド：書く」のようなもの


```
Javaプログラム（test.javaの場合）
// test.javaというファイルにおいて
public class test{
  // -------------------------以下クラスブロック
  // ひとまずおまじないということで
  public static void main(String[] args){
    // -----------------------以下メソッドブロック
    // 改行付きで出力します。
    System.out.println("hello, world!");
  }
}
```

とりあえず実行してみましょう。

簡易的に意味を紹介すると(ここでは理解しなくていいです)
- public：だれでもアクセスできるで(chmod⇒777の状態)
- class test：testクラス(ファイル名と一致させる)
- static：静的な値
- main：ここから実行する
- System.out.println：システムの標準出力で改行付きで出力する。
- (String[] args)：実行時の引数をいれるとこ

## 読みやすいコードのために
1. 変数名
2. インデント
3. コメントアウト

### 変数名
変数名とはこの後出てきますがデータを一時的に格納する箱のことです。
この箱の名前を**a**のようにするとここには「何が入ってるん？」となるので名前は中身がわかるように**score**などとしましょう。

```
(例)
int score; //点数を格納
int num;   //カウント値を格納
```

### インデント
htmlの時と同様に読みやすいコードは重要です。
そのためにはどこが１つのブロックであるか、
階層が同じかをインデントによって表現します。

先ほどの例のように第１階層がクラスブロック、
第２階層がメソッドブロックという風に
インデントを加えるときっと読みやすいと思います。

```
(例)
public class test{
←インデント→public static void main(String[] args){
```

### コメントアウト
長々とプログラムを書いていて、
１週間後にはこれって何してるん？
となることが多々あります。
こんな時に助けとなるのが**自分が残したコメントアウト(メモ)**です。
- // で囲えば１行のコメントアウト
-  /* */ で囲えば複数行のコメントアウト

```
(例)
// 改行付きで標準出力します。
System.out.println("hello, world!");
```
